// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: node_tracker.proto

package node_tracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeTrackerClient is the client API for NodeTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeTrackerClient interface {
	RegisterStorageServer(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*RegisterStorageServerResponse, error)
	UnregisterStorageServer(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*UnregisterStorageServerResponse, error)
	RegisterStorageGroup(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*RegisterStorageGroupResponse, error)
	UnregisterStorageGroup(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*UnregisterStorageGroupResponse, error)
	RegisterStorageClient(ctx context.Context, in *StorageClient, opts ...grpc.CallOption) (*RegisterStorageClientResponse, error)
	RegisterObject(ctx context.Context, in *RegisterObjectRequest, opts ...grpc.CallOption) (*RegisterObjectResponse, error)
	ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
	ObjectInfo(ctx context.Context, in *ObjectInfoRequest, opts ...grpc.CallOption) (*ObjectInfoResponse, error)
	ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteResponse, error)
}

type nodeTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeTrackerClient(cc grpc.ClientConnInterface) NodeTrackerClient {
	return &nodeTrackerClient{cc}
}

func (c *nodeTrackerClient) RegisterStorageServer(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*RegisterStorageServerResponse, error) {
	out := new(RegisterStorageServerResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/register_storage_server", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) UnregisterStorageServer(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*UnregisterStorageServerResponse, error) {
	out := new(UnregisterStorageServerResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/unregister_storage_server", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) RegisterStorageGroup(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*RegisterStorageGroupResponse, error) {
	out := new(RegisterStorageGroupResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/register_storage_group", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) UnregisterStorageGroup(ctx context.Context, in *StorageServer, opts ...grpc.CallOption) (*UnregisterStorageGroupResponse, error) {
	out := new(UnregisterStorageGroupResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/unregister_storage_group", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) RegisterStorageClient(ctx context.Context, in *StorageClient, opts ...grpc.CallOption) (*RegisterStorageClientResponse, error) {
	out := new(RegisterStorageClientResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/register_storage_client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) RegisterObject(ctx context.Context, in *RegisterObjectRequest, opts ...grpc.CallOption) (*RegisterObjectResponse, error) {
	out := new(RegisterObjectResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/register_object", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) ServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/server_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) ObjectInfo(ctx context.Context, in *ObjectInfoRequest, opts ...grpc.CallOption) (*ObjectInfoResponse, error) {
	out := new(ObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/object_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeTrackerClient) ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteResponse, error) {
	out := new(ObjectDeleteResponse)
	err := c.cc.Invoke(ctx, "/di_store.node_tracker.NodeTracker/object_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeTrackerServer is the server API for NodeTracker service.
// All implementations must embed UnimplementedNodeTrackerServer
// for forward compatibility
type NodeTrackerServer interface {
	RegisterStorageServer(context.Context, *StorageServer) (*RegisterStorageServerResponse, error)
	UnregisterStorageServer(context.Context, *StorageServer) (*UnregisterStorageServerResponse, error)
	RegisterStorageGroup(context.Context, *StorageServer) (*RegisterStorageGroupResponse, error)
	UnregisterStorageGroup(context.Context, *StorageServer) (*UnregisterStorageGroupResponse, error)
	RegisterStorageClient(context.Context, *StorageClient) (*RegisterStorageClientResponse, error)
	RegisterObject(context.Context, *RegisterObjectRequest) (*RegisterObjectResponse, error)
	ServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
	ObjectInfo(context.Context, *ObjectInfoRequest) (*ObjectInfoResponse, error)
	ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteResponse, error)
	mustEmbedUnimplementedNodeTrackerServer()
}

// UnimplementedNodeTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedNodeTrackerServer struct {
}

func (UnimplementedNodeTrackerServer) RegisterStorageServer(context.Context, *StorageServer) (*RegisterStorageServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStorageServer not implemented")
}
func (UnimplementedNodeTrackerServer) UnregisterStorageServer(context.Context, *StorageServer) (*UnregisterStorageServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterStorageServer not implemented")
}
func (UnimplementedNodeTrackerServer) RegisterStorageGroup(context.Context, *StorageServer) (*RegisterStorageGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStorageGroup not implemented")
}
func (UnimplementedNodeTrackerServer) UnregisterStorageGroup(context.Context, *StorageServer) (*UnregisterStorageGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterStorageGroup not implemented")
}
func (UnimplementedNodeTrackerServer) RegisterStorageClient(context.Context, *StorageClient) (*RegisterStorageClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStorageClient not implemented")
}
func (UnimplementedNodeTrackerServer) RegisterObject(context.Context, *RegisterObjectRequest) (*RegisterObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterObject not implemented")
}
func (UnimplementedNodeTrackerServer) ServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerInfo not implemented")
}
func (UnimplementedNodeTrackerServer) ObjectInfo(context.Context, *ObjectInfoRequest) (*ObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectInfo not implemented")
}
func (UnimplementedNodeTrackerServer) ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectDelete not implemented")
}
func (UnimplementedNodeTrackerServer) mustEmbedUnimplementedNodeTrackerServer() {}

// UnsafeNodeTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeTrackerServer will
// result in compilation errors.
type UnsafeNodeTrackerServer interface {
	mustEmbedUnimplementedNodeTrackerServer()
}

func RegisterNodeTrackerServer(s grpc.ServiceRegistrar, srv NodeTrackerServer) {
	s.RegisterService(&NodeTracker_ServiceDesc, srv)
}

func _NodeTracker_RegisterStorageServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).RegisterStorageServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/register_storage_server",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).RegisterStorageServer(ctx, req.(*StorageServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_UnregisterStorageServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).UnregisterStorageServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/unregister_storage_server",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).UnregisterStorageServer(ctx, req.(*StorageServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_RegisterStorageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).RegisterStorageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/register_storage_group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).RegisterStorageGroup(ctx, req.(*StorageServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_UnregisterStorageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).UnregisterStorageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/unregister_storage_group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).UnregisterStorageGroup(ctx, req.(*StorageServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_RegisterStorageClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).RegisterStorageClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/register_storage_client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).RegisterStorageClient(ctx, req.(*StorageClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_RegisterObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).RegisterObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/register_object",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).RegisterObject(ctx, req.(*RegisterObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_ServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).ServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/server_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).ServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_ObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).ObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/object_info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).ObjectInfo(ctx, req.(*ObjectInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeTracker_ObjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeTrackerServer).ObjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/di_store.node_tracker.NodeTracker/object_delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeTrackerServer).ObjectDelete(ctx, req.(*ObjectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeTracker_ServiceDesc is the grpc.ServiceDesc for NodeTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "di_store.node_tracker.NodeTracker",
	HandlerType: (*NodeTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_storage_server",
			Handler:    _NodeTracker_RegisterStorageServer_Handler,
		},
		{
			MethodName: "unregister_storage_server",
			Handler:    _NodeTracker_UnregisterStorageServer_Handler,
		},
		{
			MethodName: "register_storage_group",
			Handler:    _NodeTracker_RegisterStorageGroup_Handler,
		},
		{
			MethodName: "unregister_storage_group",
			Handler:    _NodeTracker_UnregisterStorageGroup_Handler,
		},
		{
			MethodName: "register_storage_client",
			Handler:    _NodeTracker_RegisterStorageClient_Handler,
		},
		{
			MethodName: "register_object",
			Handler:    _NodeTracker_RegisterObject_Handler,
		},
		{
			MethodName: "server_info",
			Handler:    _NodeTracker_ServerInfo_Handler,
		},
		{
			MethodName: "object_info",
			Handler:    _NodeTracker_ObjectInfo_Handler,
		},
		{
			MethodName: "object_delete",
			Handler:    _NodeTracker_ObjectDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_tracker.proto",
}
